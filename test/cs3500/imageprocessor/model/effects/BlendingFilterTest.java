package cs3500.imageprocessor.model.effects;import org.junit.Before;import org.junit.Test;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;import cs3500.imageprocessor.model.effects.blendfilter.BlendingFilter;import cs3500.imageprocessor.model.effects.blendfilter.BrightenBlend;import cs3500.imageprocessor.model.effects.blendfilter.DarkenBlend;import cs3500.imageprocessor.model.effects.blendfilter.Inversion;import cs3500.imageprocessor.model.effects.singlelayer.SingleLayerFilter;import cs3500.imageprocessor.model.image.Image;import cs3500.imageprocessor.model.image.ImageImpl;import cs3500.imageprocessor.model.image.Layer;import cs3500.imageprocessor.model.image.LayerImpl;import cs3500.imageprocessor.model.image.Pixel;import cs3500.imageprocessor.model.image.PixelImpl;import cs3500.imageprocessor.model.processor.ImageProcessorModel;import cs3500.imageprocessor.model.processor.ImageProcessorModelImpl;import static org.junit.Assert.assertEquals;/** * Tests the BlendingFilter class. */public class BlendingFilterTest {  BlendingFilter inversion = new Inversion();  BlendingFilter darkenBlend = new DarkenBlend();  BlendingFilter brightenBlend = new BrightenBlend();  Pixel pixel1 = new PixelImpl(50, 100, 150);  Pixel pixel2 = new PixelImpl(200, 100, 50);  Pixel pixel3 = new PixelImpl(20, 40, 50);  Pixel blackPixel = new PixelImpl(0, 0, 0);  Pixel whitePixel = new PixelImpl(255, 255, 255);  ImageProcessorModel<Layer, Image, Pixel, SingleLayerFilter, BlendingFilter> imageProcessor =          new ImageProcessorModelImpl();  Image img1;  Image img2;  Image img3;  Image img4;  Image img5;  List<List<Pixel>> array1;  List<List<Pixel>> array2;  List<List<Pixel>> array3;  List<List<Pixel>> array4;  List<List<Pixel>> array5;  //Primary Colors  Pixel white;  Pixel black;  Pixel red;  Pixel green;  Pixel blue;  //Secondary Colors  Pixel yellow;  Pixel magenta;  Pixel cyan;  //Tertiary Colors  Pixel orange;  Pixel violet;  Pixel azure;  Pixel springGreen;  Pixel chartreuse;  Pixel rose;  List<Image> imageList1;  List<Image> imageList2;  List<Image> imageList3;  List<Image> imageList4;  List<Image> imageList5;  Layer layer1;  Layer layer2;  Layer layer3;  Layer layer4;  Layer layer5;  /**   * Sets up the images and pixels for testing.   */  @Before  public void setUp() {    white = new PixelImpl(0, 0, 0);    black = new PixelImpl(255, 255, 255);    //Primary Colors    red = new PixelImpl(255, 0, 0);    green = new PixelImpl(0, 255, 0);    blue = new PixelImpl(0, 0, 255);    //Secondary Colors    yellow = new PixelImpl(255, 255, 0);    magenta = new PixelImpl(255, 0, 255);    cyan = new PixelImpl(0, 255, 255);    //Tertiary Colors    orange = new PixelImpl(255, 127, 0);    rose = new PixelImpl(255, 0, 127);    violet = new PixelImpl(127, 0, 255);    azure = new PixelImpl(0, 127, 255);    springGreen = new PixelImpl(0, 255, 127);    chartreuse = new PixelImpl(127, 255, 0);    array1 = new ArrayList<>(List.of(new ArrayList<>(Collections.singletonList(red))));    array2 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(orange, orange))),            new ArrayList<>(Arrays.asList(green, orange))));    array3 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(rose, azure, green))),            new ArrayList<>(Arrays.asList(azure, rose, green)),            new ArrayList<>(Arrays.asList(rose, azure, green)),            new ArrayList<>(Arrays.asList(azure, rose, green))));    array4 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(white, black, white,                    black, white))),            new ArrayList<>(Arrays.asList(black, white, black, white, black)),            new ArrayList<>(Arrays.asList(white, black, white, black, white)),            new ArrayList<>(Arrays.asList(black, white, black, white, black)),            new ArrayList<>(Arrays.asList(white, black, white, black, white))));    array5 = new ArrayList<>(Arrays.asList((                    new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red,                            red, red, red, red))),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red, red, red,                    red, red)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red, red, red,                    red, red)),            new ArrayList<>(Arrays.asList(white, white, white, white, white, white, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(red, red, red, red, red, red, red, red, red, red, red)),            new ArrayList<>(Arrays.asList(red, white, white, white, white, white, white, white,                    white, white, white))));    img1 = new ImageImpl(array1, 0, 0, 255);    img2 = new ImageImpl(array2, 0, 0, 255);    img3 = new ImageImpl(array3, 0, 0, 255);    img4 = new ImageImpl(array4, 0, 0, 255);    img5 = new ImageImpl(array5, 1, 2, 255);    imageList1 = new ArrayList<>(Collections.singletonList(img1));    imageList2 = new ArrayList<>(Arrays.asList(img1, img2));    imageList3 = new ArrayList<>(Arrays.asList(img1, img2, img3));    imageList4 = new ArrayList<>(Arrays.asList(img3, img5));    imageList5 = new ArrayList<>(Collections.singletonList(img4));    layer1 = new LayerImpl("Layer 1", imageList1, 5, 10);    layer2 = new LayerImpl("Layer 2", imageList2, 5, 10);    layer3 = new LayerImpl("Layer 3", imageList3, "Darken Luma", 20, 30);    layer4 = new LayerImpl("Layer 4", imageList4, "Green Component", 8, 11);    layer5 = new LayerImpl("Layer 5", imageList5, 3, 7);  }  /**   * Tests the getName method of the Inversion class.   */  @Test  public void getName() {    assertEquals("Inversion", inversion.getName());    assertEquals("Darken-Blend", darkenBlend.getName());    assertEquals("Brighten-Blend", brightenBlend.getName());  }  /**   * Tests the apply method of the Inversion class.   */  @Test  public void applyInversion() {    assertEquals(205, inversion.apply(pixel1, whitePixel).getRed());    assertEquals(155, inversion.apply(pixel1, whitePixel).getGreen());    assertEquals(105, inversion.apply(pixel1, whitePixel).getBlue());    assertEquals(50, inversion.apply(pixel1, blackPixel).getRed());    assertEquals(100, inversion.apply(pixel1, blackPixel).getGreen());    assertEquals(150, inversion.apply(pixel1, blackPixel).getBlue());    assertEquals(150, inversion.apply(pixel1, pixel2).getRed());    assertEquals(0, inversion.apply(pixel1, pixel2).getGreen());    assertEquals(100, inversion.apply(pixel1, pixel2).getBlue());    assertEquals(180, inversion.apply(pixel2, pixel3).getRed());    assertEquals(60, inversion.apply(pixel2, pixel3).getGreen());    assertEquals(0, inversion.apply(pixel2, pixel3).getBlue());    assertEquals(180, inversion.apply(pixel3, pixel2).getRed());    assertEquals(60, inversion.apply(pixel3, pixel2).getGreen());    assertEquals(0, inversion.apply(pixel3, pixel2).getBlue());  }  /**   * Tests the apply method of the BrightenBlend class.   */  @Test  public void testApplyDarken() {    assertEquals(25, darkenBlend.apply(pixel1, pixel2).getRed());    assertEquals(49, darkenBlend.apply(pixel1, pixel2).getGreen());    assertEquals(74, darkenBlend.apply(pixel1, pixel2).getBlue());    assertEquals(0, darkenBlend.apply(pixel1, blackPixel).getRed());    assertEquals(0, darkenBlend.apply(pixel1, blackPixel).getGreen());    assertEquals(0, darkenBlend.apply(pixel1, blackPixel).getBlue());    assertEquals(50, darkenBlend.apply(pixel1, whitePixel).getRed());    assertEquals(100, darkenBlend.apply(pixel1, whitePixel).getGreen());    assertEquals(150, darkenBlend.apply(pixel1, whitePixel).getBlue());    assertEquals(20, darkenBlend.apply(pixel1, pixel1).getRed());    assertEquals(39, darkenBlend.apply(pixel1, pixel1).getGreen());    assertEquals(59, darkenBlend.apply(pixel1, pixel1).getBlue());  }  /**   * Tests the apply method of the BrightenBlend class.   */  @Test  public void testApplyBrighten() {    assertEquals(136, brightenBlend.apply(pixel1, pixel2).getRed());    assertEquals(176, brightenBlend.apply(pixel1, pixel2).getGreen());    assertEquals(215, brightenBlend.apply(pixel1, pixel2).getBlue());    assertEquals(255, brightenBlend.apply(pixel1, whitePixel).getRed());    assertEquals(255, brightenBlend.apply(pixel1, whitePixel).getGreen());    assertEquals(255, brightenBlend.apply(pixel1, whitePixel).getBlue());    assertEquals(50, brightenBlend.apply(pixel1, blackPixel).getRed());    assertEquals(100, brightenBlend.apply(pixel1, blackPixel).getGreen());    assertEquals(150, brightenBlend.apply(pixel1, blackPixel).getBlue());    assertEquals(114, brightenBlend.apply(pixel1, pixel1).getRed());    assertEquals(161, brightenBlend.apply(pixel1, pixel1).getGreen());    assertEquals(208, brightenBlend.apply(pixel1, pixel1).getBlue());    assertEquals(61, brightenBlend.apply(pixel1, pixel3).getRed());    assertEquals(121, brightenBlend.apply(pixel1, pixel3).getGreen());    assertEquals(182, brightenBlend.apply(pixel1, pixel3).getBlue());  }  /**   * Tests the apply method of the Inversion class.   */  @Test  public void testApplyBlendingFunctionInversion() {    imageProcessor.newProject(3, 6);    for (int i = 0; i < 3; i++) {      for (int j = 0; j < 6; j++) {        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getRed());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getGreen());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getBlue());      }    }    imageProcessor.applyBlendingFunction("inversion", "Background");    for (int i = 0; i < 3; i++) {      for (int j = 0; j < 6; j++) {        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getRed());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getGreen());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getBlue());      }    }    imageProcessor.addLayer("Layer1");    imageProcessor.addImageToLayerWithImage("Layer1", img3, 0, 0);    imageProcessor.applyBlendingFunction("inversion", "Layer1");    assertEquals(0, imageProcessor.getLayer("Layer1")            .getPixel(0, 0).getRed());    assertEquals(255, imageProcessor.getLayer("Layer1")            .getPixel(0, 0).getGreen());    assertEquals(128, imageProcessor.getLayer("Layer1")            .getPixel(0, 0).getBlue());    assertEquals(255, imageProcessor.getLayer("Layer1")            .getPixel(0, 1).getRed());    assertEquals(128, imageProcessor.getLayer("Layer1")            .getPixel(0, 1).getGreen());    assertEquals(0, imageProcessor.getLayer("Layer1")            .getPixel(0, 1).getBlue());    imageProcessor.addLayer("Layer2");    imageProcessor.addImageToLayerWithImage("Layer2", img4, 0, 0);    imageProcessor.applyBlendingFunction("inversion", "Layer2");    assertEquals(0, imageProcessor.getLayer("Layer2")            .getPixel(0, 0).getRed());    assertEquals(255, imageProcessor.getLayer("Layer2")            .getPixel(0, 0).getGreen());    assertEquals(128, imageProcessor.getLayer("Layer2")            .getPixel(0, 0).getBlue());  }  /**   * Tests the apply method of the BrightenBlend class.   */  @Test  public void testApplyBlendingFunctionBrightenBlend() {    imageProcessor.newProject(3, 6);    for (int i = 0; i < 3; i++) {      for (int j = 0; j < 6; j++) {        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getRed());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getGreen());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getBlue());      }    }    imageProcessor.applyBlendingFunction("brighten-blend", "Background");    for (int i = 0; i < 3; i++) {      for (int j = 0; j < 6; j++) {        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getRed());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getGreen());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getBlue());      }    }    imageProcessor.addLayer("Layer1");    imageProcessor.addImageToLayerWithImage("Layer1", img3, 0, 0);    imageProcessor.applyBlendingFunction("brighten-blend", "Layer1");    for (int i = 0; i < 3; i++) {      for (int j = 0; j < 6; j++) {        assertEquals(255, imageProcessor.getLayer("Layer1")                .getPixel(i, j).getRed());        assertEquals(255, imageProcessor.getLayer("Layer1")                .getPixel(i, j).getGreen());        assertEquals(255, imageProcessor.getLayer("Layer1")                .getPixel(i, j).getBlue());      }    }  }  /**   * Tests the apply method of the DarkenBlend class. This test is not complete.   */  @Test  public void testApplyBlendingFunctionDarkenBlend() {    imageProcessor.newProject(3, 6);    for (int i = 0; i < 3; i++) {      for (int j = 0; j < 6; j++) {        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getRed());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getGreen());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getBlue());      }    }    imageProcessor.applyBlendingFunction("darken-blend", "Background");    for (int i = 0; i < 3; i++) {      for (int j = 0; j < 6; j++) {        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getRed());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getGreen());        assertEquals(255, imageProcessor.getLayer("Background")                .getPixel(i, j).getBlue());      }    }    imageProcessor.addLayer("Layer1");    imageProcessor.addImageToLayerWithImage("Layer1", img3, 0, 0);    imageProcessor.applyBlendingFunction("darken-blend", "Layer1");    assertEquals(255, imageProcessor.getLayer("Layer1")            .getPixel(0, 0).getRed());    assertEquals(0, imageProcessor.getLayer("Layer1")            .getPixel(0, 0).getGreen());    assertEquals(127, imageProcessor.getLayer("Layer1")            .getPixel(0, 0).getBlue());  }  /**   * Tests the getPixel method of the BlendingFilter class.   */  @Test  public void getPixel() {    Double[] hslValues = {180., 0.5, 0.5};    Pixel pixel1 = BlendingFilter.getPixel(hslValues);    assertEquals(64, pixel1.getRed());    assertEquals(191, pixel1.getGreen());    assertEquals(191, pixel1.getBlue());    Double[] hslValues2 = {14., .813, 0.624};    Pixel pixel2 = BlendingFilter.getPixel(hslValues2);    assertEquals(237, pixel2.getRed());    assertEquals(118, pixel2.getGreen());    assertEquals(81, pixel2.getBlue());    Double[] hslValues3 = {0., 1., 0.5};    Pixel pixel3 = BlendingFilter.getPixel(hslValues3);    assertEquals(255, pixel3.getRed());    assertEquals(0, pixel3.getGreen());    assertEquals(0, pixel3.getBlue());    Double[] hslValues4 = {0., 0., 1.};    Pixel pixel4 = BlendingFilter.getPixel(hslValues4);    assertEquals(255, pixel4.getRed());    assertEquals(255, pixel4.getGreen());    assertEquals(255, pixel4.getBlue());  }}