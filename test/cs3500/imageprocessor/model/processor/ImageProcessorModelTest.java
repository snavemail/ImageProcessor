package cs3500.imageprocessor.model.processor;import org.junit.Before;import org.junit.Test;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;import cs3500.imageprocessor.model.effects.blendfilter.BlendingFilter;import cs3500.imageprocessor.model.effects.singlelayer.SingleLayerFilter;import cs3500.imageprocessor.model.image.Image;import cs3500.imageprocessor.model.image.ImageImpl;import cs3500.imageprocessor.model.image.Layer;import cs3500.imageprocessor.model.image.LayerImpl;import cs3500.imageprocessor.model.image.Pixel;import cs3500.imageprocessor.model.image.PixelImpl;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;/** * Tests the ImageProcessorModel class. */public class ImageProcessorModelTest {  ImageProcessorModel<Layer, Image, Pixel, SingleLayerFilter, BlendingFilter> imageProcessor;  Image img1;  Image img2;  Image img3;  Image img4;  Image img5;  List<List<Pixel>> array1;  List<List<Pixel>> array2;  List<List<Pixel>> array3;  List<List<Pixel>> array4;  List<List<Pixel>> array5;  //Primary Colors  Pixel white;  Pixel black;  Pixel red;  Pixel green;  Pixel blue;  //Secondary Colors  Pixel yellow;  Pixel magenta;  Pixel cyan;  //Tertiary Colors  Pixel orange;  Pixel violet;  Pixel azure;  Pixel springGreen;  Pixel chartreuse;  Pixel rose;  List<Image> imageList1;  List<Image> imageList2;  List<Image> imageList3;  List<Image> imageList4;  List<Image> imageList5;  Layer layer1;  Layer layer2;  Layer layer3;  Layer layer4;  Layer layer5;  /**   * Sets up the images and pixels for testing.   */  @Before  public void setUp() {    white = new PixelImpl(0, 0, 0);    black = new PixelImpl(255, 255, 255);    //Primary Colors    red = new PixelImpl(255, 0, 0);    green = new PixelImpl(0, 255, 0);    blue = new PixelImpl(0, 0, 255);    //Secondary Colors    yellow = new PixelImpl(255, 255, 0);    magenta = new PixelImpl(255, 0, 255);    cyan = new PixelImpl(0, 255, 255);    //Tertiary Colors    orange = new PixelImpl(255, 127, 0);    rose = new PixelImpl(255, 0, 127);    violet = new PixelImpl(127, 0, 255);    azure = new PixelImpl(0, 127, 255);    springGreen = new PixelImpl(0, 255, 127);    chartreuse = new PixelImpl(127, 255, 0);    array1 = new ArrayList<>(List.of(new ArrayList<>(Collections.singletonList(red))));    array2 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(orange, orange))),            new ArrayList<>(Arrays.asList(green, orange))));    array3 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(rose, azure, green))),            new ArrayList<>(Arrays.asList(azure, rose, green)),            new ArrayList<>(Arrays.asList(rose, azure, green)),            new ArrayList<>(Arrays.asList(azure, rose, green))));    array4 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(white, black, white,                    black, white))),            new ArrayList<>(Arrays.asList(black, white, black, white, black)),            new ArrayList<>(Arrays.asList(white, black, white, black, white)),            new ArrayList<>(Arrays.asList(black, white, black, white, black)),            new ArrayList<>(Arrays.asList(white, black, white, black, white))));    array5 = new ArrayList<>(Arrays.asList((                    new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red,                            red, red, red, red))),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red, red, red,                    red, red)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red, red, red,                    red, red)),            new ArrayList<>(Arrays.asList(white, white, white, white, white, white, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(red, red, red, red, red, red, red, red, red, red, red)),            new ArrayList<>(Arrays.asList(red, white, white, white, white, white, white, white,                    white, white, white))));    img1 = new ImageImpl(array1, 0, 0, 255);    img2 = new ImageImpl(array2, 0, 0, 255);    img3 = new ImageImpl(array3, 0, 0, 255);    img4 = new ImageImpl(array4, 0, 0, 255);    img5 = new ImageImpl(array5, 1, 2, 255);    imageList1 = new ArrayList<>(Collections.singletonList(img1));    imageList2 = new ArrayList<>(Arrays.asList(img1, img2));    imageList3 = new ArrayList<>(Arrays.asList(img1, img2, img3));    imageList4 = new ArrayList<>(Arrays.asList(img3, img5));    imageList5 = new ArrayList<>(Collections.singletonList(img4));    layer1 = new LayerImpl("Layer 1", imageList1, 5, 10);    layer2 = new LayerImpl("Layer 2", imageList2, 5, 10);    layer3 = new LayerImpl("Layer 3", imageList3, "Darken Luma", 20, 30);    layer4 = new LayerImpl("Layer 4", imageList4, "Green Component", 8, 11);    layer5 = new LayerImpl("Layer 5", imageList5, 3, 7);    imageProcessor = new ImageProcessorModelImpl();  }  /**   * Tests the newProject method.   */  @Test  public void newProject() {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals(10, imageProcessor.getWidth());    assertEquals(10, imageProcessor.getHeight());    assertEquals(255, imageProcessor.getMaxValue());    assertEquals(1, imageProcessor.getLayers().size());    assertEquals(1, imageProcessor.getLayers().get(0).getImages().size());    assertEquals(10, imageProcessor.getLayers().get(0).getImages().get(0).getWidth());    assertEquals(10, imageProcessor.getLayers().get(0).getImages().get(0).getHeight());    assertEquals(255, imageProcessor.getLayers().get(0).getImages().get(0).getMaxValue());  }  /**   * Tests the getWidth method.   */  @Test  public void getWidth() {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals(10, imageProcessor.getWidth());  }  /**   * Tests the getHeight method.   */  @Test  public void getHeight() {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals(10, imageProcessor.getHeight());  }  /**   * Tests the addLayer method.   */  @Test  public void addLayer() {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals(1, imageProcessor.getLayers().size());    System.out.println(imageProcessor.getLayers().get(0).getClass().getName());    assertEquals("Background", imageProcessor.getLayers().get(0).getName());    imageProcessor.addLayer("Layer 1");    assertEquals(2, imageProcessor.getLayers().size());    assertEquals("Layer 1", imageProcessor.getLayers().get(1).getName());  }  /**   * Tests the getCurrentLayer method.   */  @Test  public void getCurrentLayer() throws IllegalAccessException {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals("Background", imageProcessor.getCurrentLayer().getName());    imageProcessor.addLayer("Layer 1");    assertEquals("Layer 1", imageProcessor.getCurrentLayer().getName());  }  /**   * Tests the setCurrentLayer method.   */  @Test  public void setCurrentLayer() throws IllegalAccessException {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals("Background", imageProcessor.getCurrentLayer().getName());    imageProcessor.addLayer("Layer 1");    assertEquals("Layer 1", imageProcessor.getCurrentLayer().getName());    imageProcessor.setCurrentLayer("Background");    assertEquals("Background", imageProcessor.getCurrentLayer().getName());  }  /**   * Tests the getLayer method.   */  @Test  public void getLayer() {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals("Background", imageProcessor.getLayer("Background").getName());    imageProcessor.addLayer("Layer 1");    assertEquals("Layer 1", imageProcessor.getLayer("Layer 1").getName());  }  /**   * Tests the getLayers method.   */  @Test  public void getLayers() {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals(1, imageProcessor.getLayers().size());    assertEquals("Background", imageProcessor.getLayers().get(0).getName());    imageProcessor.addLayer("Layer 1");    assertEquals(2, imageProcessor.getLayers().size());    assertEquals("Layer 1", imageProcessor.getLayers().get(1).getName());  }  /**   * Tests the hasKey method.   */  @Test  public void hasKey() {    this.setUp();    imageProcessor.newProject(10, 10);    assertTrue(imageProcessor.hasKey("Background"));    imageProcessor.addLayer("Layer 1");    assertTrue(imageProcessor.hasKey("Layer 1"));    assertFalse(imageProcessor.hasKey("Layer 2"));  }  /**   * Tests the getLayerWidth method.   */  @Test  public void getLayerWidth() {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals(10, imageProcessor.getLayerWidth("Background"));    imageProcessor.addLayer("Layer 1");    assertEquals(10, imageProcessor.getLayerWidth("Layer 1"));  }  /**   * Tests the getLayerHeight method.   */  @Test  public void getLayerHeight() {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals(10, imageProcessor.getLayerHeight("Background"));    imageProcessor.addLayer("Layer 1");    assertEquals(10, imageProcessor.getLayerHeight("Layer 1"));  }  /**   * Tests the getLayerMaxValue method.   */  @Test  public void getLayerMaxValue() {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals(255, imageProcessor.getLayerMaxValue("Background"));    imageProcessor.addLayer("Layer 1");    assertEquals(255, imageProcessor.getLayerMaxValue("Layer 1"));  }  /**   * Tests the getMaxValue method.   */  @Test  public void getMaxValue() {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals(255, imageProcessor.getMaxValue());  }  /**   * Tests the create2DArray method.   */  @Test  public void create2DArray() throws IllegalAccessException {    this.setUp();    imageProcessor.newProject(10, 10);    assertEquals(10, imageProcessor.create2DArray(            imageProcessor.getCurrentLayer().getPixels(), 10, 10).size());    assertEquals(10, imageProcessor.create2DArray(            imageProcessor.getCurrentLayer().getPixels(), 10, 10).get(0).size());  }  /**   * Tests the applyFilter method.   */  @Test  public void applyFilter() {    this.setUp();    imageProcessor.newProject(10, 10);    imageProcessor.addLayer("Layer 1");    assertEquals("Normal", imageProcessor.getLayer("Layer 1")            .getFilter().getName());  }  /**   * Tests the applyFunction method.   */  @Test  public void applyFunction() {    this.setUp();    imageProcessor.newProject(10, 10);    imageProcessor.addLayer("Layer 1");    assertEquals("Normal", imageProcessor.getLayer("Layer 1")            .getFilter().getName());    imageProcessor.applyFunction("green-component", "Layer 1");    assertEquals("Green Component", imageProcessor.getLayer("Layer 1")            .getFilter().getName());    imageProcessor.applyFunction("red-component", "Layer 1");    assertEquals("Red Component", imageProcessor.getLayer("Layer 1")            .getFilter().getName());  }  /**   * Test for addImageToLayer method.   */  @Test  public void addImageToLayer() {    this.setUp();    imageProcessor.newProject(10, 10);    imageProcessor.addLayer("Layer 1");    assertEquals(0, imageProcessor.getLayer("Layer 1").getImages().size());    imageProcessor.addImageToLayerWithImage("Layer 1", img1, 0, 0);    assertEquals(1, imageProcessor.getLayer("Layer 1").getImages().size());  }  /**   * Test for hasFilter method.   */  @Test  public void hasFilter() {    this.setUp();    imageProcessor.newProject(10, 10);    imageProcessor.addLayer("Layer 1");    String[] filters = {"red-component", "green-component", "blue-component",        "brighten-value", "brighten-intensity", "brighten-luma", "darken-value",        "darken-intensity", "darken-luma", "normal"};    for (String filter : filters) {      assertTrue(imageProcessor.hasFilter(filter));    }    assertFalse(imageProcessor.hasFilter("filter"));  }}