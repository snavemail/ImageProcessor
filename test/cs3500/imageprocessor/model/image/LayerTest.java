package cs3500.imageprocessor.model.image;import org.junit.Before;import org.junit.Test;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;import cs3500.imageprocessor.model.effects.singlelayer.DarkenLuma;import cs3500.imageprocessor.model.effects.singlelayer.GreenComponent;import cs3500.imageprocessor.model.effects.singlelayer.Normal;import cs3500.imageprocessor.model.effects.singlelayer.RedComponent;import static org.junit.Assert.assertEquals;/** * Tests the Layer class. */public class LayerTest {  Image img1;  Image img2;  Image img3;  Image img4;  Image img5;  List<List<Pixel>> array1;  List<List<Pixel>> array2;  List<List<Pixel>> array3;  List<List<Pixel>> array4;  List<List<Pixel>> array5;  //Primary Colors  Pixel white;  Pixel black;  Pixel red;  Pixel green;  Pixel blue;  //Secondary Colors  Pixel yellow;  Pixel magenta;  Pixel cyan;  //Tertiary Colors  Pixel orange;  Pixel violet;  Pixel azure;  Pixel springGreen;  Pixel chartreuse;  Pixel rose;  List<Image> imageList1;  List<Image> imageList2;  List<Image> imageList3;  List<Image> imageList4;  List<Image> imageList5;  Layer layer1;  Layer layer2;  Layer layer3;  Layer layer4;  Layer layer5;  /**   * Sets up the images and pixels for testing.   */  @Before  public void setUp() {    white = new PixelImpl(0, 0, 0);    black = new PixelImpl(255, 255, 255);    //Primary Colors    red = new PixelImpl(255, 0, 0);    green = new PixelImpl(0, 255, 0);    blue = new PixelImpl(0, 0, 255);    //Secondary Colors    yellow = new PixelImpl(255, 255, 0);    magenta = new PixelImpl(255, 0, 255);    cyan = new PixelImpl(0, 255, 255);    //Tertiary Colors    orange = new PixelImpl(255, 127, 0);    rose = new PixelImpl(255, 0, 127);    violet = new PixelImpl(127, 0, 255);    azure = new PixelImpl(0, 127, 255);    springGreen = new PixelImpl(0, 255, 127);    chartreuse = new PixelImpl(127, 255, 0);    array1 = new ArrayList<>(List.of(new ArrayList<>(Collections.singletonList(red))));    array2 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(orange, orange))),            new ArrayList<>(Arrays.asList(green, orange))));    array3 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(rose, azure, green))),            new ArrayList<>(Arrays.asList(azure, rose, green)),            new ArrayList<>(Arrays.asList(rose, azure, green)),            new ArrayList<>(Arrays.asList(azure, rose, green))));    array4 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(white, black, white,                    black, white))),            new ArrayList<>(Arrays.asList(black, white, black, white, black)),            new ArrayList<>(Arrays.asList(white, black, white, black, white)),            new ArrayList<>(Arrays.asList(black, white, black, white, black)),            new ArrayList<>(Arrays.asList(white, black, white, black, white))));    array5 = new ArrayList<>(Arrays.asList((                    new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red,                            red, red, red, red))),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red, red, red,                    red, red)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red, red, red,                    red, red)),            new ArrayList<>(Arrays.asList(white, white, white, white, white, white, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(red, red, red, red, red, red, red, red, red, red, red)),            new ArrayList<>(Arrays.asList(red, white, white, white, white, white, white, white,                    white, white, white))));    img1 = new ImageImpl(array1, 0, 0, 255);    img2 = new ImageImpl(array2, 0, 0, 255);    img3 = new ImageImpl(array3, 0, 0, 255);    img4 = new ImageImpl(array4, 0, 0, 255);    img5 = new ImageImpl(array5, 1, 2, 255);    imageList1 = new ArrayList<>(Collections.singletonList(img1));    imageList2 = new ArrayList<>(Arrays.asList(img1, img2));    imageList3 = new ArrayList<>(Arrays.asList(img1, img2, img3));    imageList4 = new ArrayList<>(Arrays.asList(img3, img5));    imageList5 = new ArrayList<>(Collections.singletonList(img4));    layer1 = new LayerImpl("Layer 1", imageList1, 5, 10);    layer2 = new LayerImpl("Layer 2", imageList2, 5, 10);    layer3 = new LayerImpl("Layer 3", imageList3, "Darken Luma", 20, 30);    layer4 = new LayerImpl("Layer 4", imageList4, "Green Component", 8, 11);    layer5 = new LayerImpl("Layer 5", imageList5, 3, 7);  }  /**   * Tests the getName method.   */  @Test  public void getName() {    this.setUp();    assertEquals("Layer 1", layer1.getName());    assertEquals("Layer 2", layer2.getName());    assertEquals("Layer 3", layer3.getName());    assertEquals("Layer 4", layer4.getName());    assertEquals("Layer 5", layer5.getName());  }  /**   * Tests the addImages method.   */  @Test  public void addImage() {    this.setUp();    assertEquals(1, layer1.getImages().size());    layer1.addImage(img2, 0, 0);    assertEquals(2, layer1.getImages().size());    assertEquals(2, layer2.getImages().size());    layer2.addImage(img3, 0, 0);    assertEquals(3, layer2.getImages().size());    assertEquals(3, layer3.getImages().size());    layer3.addImage(img4, 1, 1);    assertEquals(4, layer3.getImages().size());    assertEquals(2, layer4.getImages().size());    layer4.addImage(img5, 1, 1);    assertEquals(3, layer4.getImages().size());    assertEquals(1, layer5.getImages().size());    layer5.addImage(img1, 2, 2);    assertEquals(2, layer5.getImages().size());  }  /**   * Tests the getFilter method.   */  @Test  public void getFilter() {    this.setUp();    assertEquals("Normal", layer1.getFilter().getName());    assertEquals("Normal", layer2.getFilter().getName());    assertEquals("Darken Luma", layer3.getFilter().getName());    assertEquals("Green Component", layer4.getFilter().getName());    assertEquals("Normal", layer5.getFilter().getName());  }  /**   * Tests the setFilter method.   */  @Test  public void setFilter() {    this.setUp();    assertEquals("Normal", layer1.getFilter().getName());    layer1.setFilter(new DarkenLuma());    assertEquals("Darken Luma", layer1.getFilter().getName());    assertEquals("Normal", layer2.getFilter().getName());    layer2.setFilter(new GreenComponent());    assertEquals("Green Component", layer2.getFilter().getName());    assertEquals("Darken Luma", layer3.getFilter().getName());    layer3.setFilter(new Normal());    assertEquals("Normal", layer3.getFilter().getName());    assertEquals("Green Component", layer4.getFilter().getName());    layer4.setFilter(new DarkenLuma());    assertEquals("Darken Luma", layer4.getFilter().getName());    assertEquals("Normal", layer5.getFilter().getName());    layer5.setFilter(new RedComponent());    assertEquals("Red Component", layer5.getFilter().getName());  }  /**   * Tests the getImages method.   */  @Test  public void getImages() {    this.setUp();    assertEquals(1, layer1.getImages().size());    assertEquals(2, layer2.getImages().size());    assertEquals(3, layer3.getImages().size());    assertEquals(2, layer4.getImages().size());    assertEquals(1, layer5.getImages().size());  }  /**   * Tests the getWidth method.   */  @Test  public void getWidth() {    this.setUp();    assertEquals(5, layer1.getWidth());    assertEquals(5, layer2.getWidth());    assertEquals(20, layer3.getWidth());    assertEquals(8, layer4.getWidth());    assertEquals(3, layer5.getWidth());  }  /**   * Tests the getHeight method.   */  @Test  public void getHeight() {    this.setUp();    assertEquals(10, layer1.getHeight());    assertEquals(10, layer2.getHeight());    assertEquals(30, layer3.getHeight());    assertEquals(11, layer4.getHeight());    assertEquals(7, layer5.getHeight());  }  /**   * Tests the getMaxValue method.   */  @Test  public void getMaxValue() {    this.setUp();    assertEquals(255, layer1.getMaxValue());    assertEquals(255, layer2.getMaxValue());    assertEquals(255, layer3.getMaxValue());    assertEquals(255, layer4.getMaxValue());    assertEquals(255, layer5.getMaxValue());  }  /**   * Tests the getPixel method.   */  @Test  public void getPixel() {    this.setUp();    assertEquals(this.red, layer1.getPixel(0, 0));    assertEquals(255, layer1.getPixel(4, 9).getRed());    assertEquals(255, layer1.getPixel(4, 9).getGreen());    assertEquals(255, layer1.getPixel(4, 9).getBlue());    assertEquals(255, layer1.getPixel(2, 5).getRed());    assertEquals(255, layer1.getPixel(2, 5).getGreen());    assertEquals(255, layer1.getPixel(2, 5).getBlue());    assertEquals(this.orange, layer2.getPixel(0, 0));    assertEquals(this.green, layer2.getPixel(0, 1));    assertEquals(this.orange, layer2.getPixel(1, 0));    assertEquals(this.orange, layer2.getPixel(1, 1));    assertEquals(this.rose, layer4.getPixel(0, 0));    assertEquals(this.azure, layer4.getPixel(1, 0));    assertEquals(this.green, layer4.getPixel(2, 0));    assertEquals(255, layer4.getPixel(3, 0).getRed());    assertEquals(255, layer4.getPixel(3, 0).getGreen());    assertEquals(255, layer4.getPixel(3, 0).getBlue());    assertEquals(this.blue, layer4.getPixel(1, 2));  }  /**   * Tests the getPixels method.   */  @Test  public void getPixels() {    this.setUp();    assertEquals(50, layer1.getPixels().size());    assertEquals(50, layer2.getPixels().size());    assertEquals(600, layer3.getPixels().size());    assertEquals(88, layer4.getPixels().size());    assertEquals(21, layer5.getPixels().size());  }}