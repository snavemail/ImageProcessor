package cs3500.imageprocessor.model.image;import org.junit.Before;import org.junit.Test;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;/** * This class contains tests for the Image class. */public class ImageTest {  Image img1;  Image img2;  Image img3;  Image img4;  Image img5;  List<List<Pixel>> array1;  List<List<Pixel>> array2;  List<List<Pixel>> array3;  List<List<Pixel>> array4;  List<List<Pixel>> array5;  //Primary Colors  Pixel white;  Pixel black;  Pixel red;  Pixel green;  Pixel blue;  //Secondary Colors  Pixel yellow;  Pixel magenta;  Pixel cyan;  //Tertiary Colors  Pixel orange;  Pixel violet;  Pixel azure;  Pixel springGreen;  Pixel chartreuse;  Pixel rose;  /**   * Sets up the images and pixels for testing.   */  @Before  public void setUp() {    white = new PixelImpl(0, 0, 0);    black = new PixelImpl(255, 255, 255);    //Primary Colors    red = new PixelImpl(255, 0, 0);    green = new PixelImpl(0, 255, 0);    blue = new PixelImpl(0, 0, 255);    //Secondary Colors    yellow = new PixelImpl(255, 255, 0);    magenta = new PixelImpl(255, 0, 255);    cyan = new PixelImpl(0, 255, 255);    //Tertiary Colors    orange = new PixelImpl(255, 127, 0);    rose = new PixelImpl(255, 0, 127);    violet = new PixelImpl(127, 0, 255);    azure = new PixelImpl(0, 127, 255);    springGreen = new PixelImpl(0, 255, 127);    chartreuse = new PixelImpl(127, 255, 0);    array1 = new ArrayList<>(List.of(new ArrayList<>(Collections.singletonList(red))));    array2 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(orange, orange))),            new ArrayList<>(Arrays.asList(green, orange))));    array3 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(rose, azure, green))),            new ArrayList<>(Arrays.asList(azure, rose, green)),            new ArrayList<>(Arrays.asList(rose, azure, green)),            new ArrayList<>(Arrays.asList(azure, rose, green))));    array4 = new ArrayList<>(Arrays.asList((new ArrayList<>(Arrays.asList(white, black, white,                    black, white))),            new ArrayList<>(Arrays.asList(black, white, black, white, black)),            new ArrayList<>(Arrays.asList(white, black, white, black, white)),            new ArrayList<>(Arrays.asList(black, white, black, white, black)),            new ArrayList<>(Arrays.asList(white, black, white, black, white))));    array5 = new ArrayList<>(Arrays.asList((                    new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red,                            red, red, red, red))),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red, red, red,                    red, red)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(blue, blue, blue, blue, blue, blue, red, red, red,                    red, red)),            new ArrayList<>(Arrays.asList(white, white, white, white, white, white, white, white,                    white, white, white)),            new ArrayList<>(Arrays.asList(red, red, red, red, red, red, red, red, red, red, red)),            new ArrayList<>(Arrays.asList(red, white, white, white, white, white, white, white,                    white, white, white))));    img1 = new ImageImpl(array1, 0, 0, 255);    img2 = new ImageImpl(array2, 0, 0, 255);    img3 = new ImageImpl(array3, 0, 0, 255);    img4 = new ImageImpl(array4, 0, 0, 255);    img5 = new ImageImpl(array5, 5, 10, 255);  }  /**   * Tests the constructor for the Image class with null array.   */  @Test(expected = IllegalArgumentException.class)  public void illegalConstructorNullArray() {    new ImageImpl(null, 8, 8, 5);  }  /**   * Tests the constructor for the Image class with negative width.   */  @Test(expected = IllegalArgumentException.class)  public void illegalConstructorNegWidth() {    new ImageImpl(array1, -8, 8, 11);  }  /**   * Tests the constructor for the Image class with negative height.   */  @Test(expected = IllegalArgumentException.class)  public void illegalConstructorNegHeight() {    new ImageImpl(array1, 8, -8, 11);  }  /**   * Tests the constructor for the Image class with negative max value.   */  @Test(expected = IllegalArgumentException.class)  public void illegalConstructorNegMaxValue() {    new ImageImpl(array1, 8, 8, -11);  }  /**   * Tests the getHeight method.   */  @Test  public void getHeight() {    this.setUp();    assertEquals(1, this.img1.getHeight());    assertEquals(2, this.img2.getHeight());    assertEquals(4, this.img3.getHeight());    assertEquals(5, this.img4.getHeight());    assertEquals(8, this.img5.getHeight());  }  /**   * Tests the getWidth method.   */  @Test  public void getWidth() {    this.setUp();    assertEquals(1, this.img1.getWidth());    assertEquals(2, this.img2.getWidth());    assertEquals(3, this.img3.getWidth());    assertEquals(5, this.img4.getWidth());    assertEquals(11, this.img5.getWidth());  }  /**   * Tests the getMaxValue method.   */  @Test  public void getMaxValue() {    this.setUp();    assertEquals(255, this.img1.getMaxValue());    assertEquals(255, this.img2.getMaxValue());    assertEquals(255, this.img3.getMaxValue());    assertEquals(255, this.img4.getMaxValue());    assertEquals(255, this.img5.getMaxValue());  }  /**   * Tests the getImageList method.   */  @Test  public void getImageList() {    this.setUp();    assertEquals(this.array1, this.img1.getImageList());    assertEquals(this.array2, this.img2.getImageList());    assertEquals(this.array3, this.img3.getImageList());    assertEquals(this.array4, this.img4.getImageList());    assertEquals(this.array5, this.img5.getImageList());  }  /**   * Tests the getXLoc method.   */  @Test  public void getXLoc() {    this.setUp();    assertEquals(0, this.img1.getXLoc());    assertEquals(0, this.img2.getXLoc());    assertEquals(0, this.img3.getXLoc());    assertEquals(0, this.img4.getXLoc());    assertEquals(5, this.img5.getXLoc());  }  /**   * Tests the getYLoc method.   */  @Test  public void getYLoc() {    this.setUp();    assertEquals(0, this.img1.getYLoc());    assertEquals(0, this.img2.getYLoc());    assertEquals(0, this.img3.getYLoc());    assertEquals(0, this.img4.getYLoc());    assertEquals(10, this.img5.getYLoc());  }  /**   * Tests the setXLoc method.   */  @Test  public void setXLoc() {    this.setUp();    this.img1.setXLoc(5);    assertEquals(5, this.img1.getXLoc());    this.img2.setXLoc(10);    assertEquals(10, this.img2.getXLoc());  }  /**   * Tests the setYLoc method.   */  @Test  public void setYLoc() {    this.setUp();    this.img1.setYLoc(5);    assertEquals(5, this.img1.getYLoc());    this.img2.setYLoc(10);    assertEquals(10, this.img2.getYLoc());  }  /**   * Tests the setMaxValue method.   */  @Test  public void testGetHeight() {    this.setUp();    assertEquals(1, this.img1.getHeight());    assertEquals(2, this.img2.getHeight());    assertEquals(4, this.img3.getHeight());    assertEquals(5, this.img4.getHeight());    assertEquals(8, this.img5.getHeight());  }  /**   * Tests the getWidth method.   */  @Test  public void testGetWidth() {    this.setUp();    assertEquals(1, this.img1.getWidth());    assertEquals(2, this.img2.getWidth());    assertEquals(3, this.img3.getWidth());    assertEquals(5, this.img4.getWidth());    assertEquals(11, this.img5.getWidth());  }  /**   * Tests the getMaxValue method.   */  @Test  public void testGetMaxValue() {    this.setUp();    assertEquals(255, this.img1.getMaxValue());    assertEquals(255, this.img2.getMaxValue());    assertEquals(255, this.img3.getMaxValue());    assertEquals(255, this.img4.getMaxValue());    assertEquals(255, this.img5.getMaxValue());  }  /**   * Tests the getImageList method.   */  @Test  public void testGetImageList() {    this.setUp();    assertEquals(this.array1, this.img1.getImageList());    assertEquals(this.array2, this.img2.getImageList());    assertEquals(this.array3, this.img3.getImageList());    assertEquals(this.array4, this.img4.getImageList());    assertEquals(this.array5, this.img5.getImageList());  }  /**   * Tests the flattenList method.   */  @Test  public void flattenList() {    this.setUp();    assertEquals(1, this.img1.flattenList().size());    assertEquals(4, this.img2.flattenList().size());    assertEquals(12, this.img3.flattenList().size());    assertEquals(25, this.img4.flattenList().size());    assertEquals(88, this.img5.flattenList().size());  }  /**   * Tests the inBounds method.   */  @Test  public void inBounds() {    this.setUp();    assertTrue(this.img1.inBounds(0, 0, img1.getWidth(), img1.getHeight()));    assertTrue(this.img2.inBounds(0, 0, img2.getWidth(), img2.getHeight()));    assertFalse(this.img2.inBounds(4, 5, img2.getWidth(), img2.getHeight()));    assertFalse(this.img2.inBounds(-4, -5, img2.getWidth(), img2.getHeight()));    assertTrue(this.img3.inBounds(0, 0, img3.getWidth(), img3.getHeight()));    assertFalse(this.img3.inBounds(4, 5, img3.getWidth(), img3.getHeight()));    assertTrue(this.img4.inBounds(0, 0, img4.getWidth(), img4.getHeight()));    assertFalse(this.img4.inBounds(4, 5, img4.getWidth(), img4.getHeight()));    assertFalse(this.img5.inBounds(0, 0, img5.getWidth(), img5.getHeight()));    assertTrue(this.img5.inBounds(6, 12, img5.getWidth(), img5.getHeight()));  }  /**   * Tests the getPixel method.   */  @Test  public void getPixel() {    this.setUp();    assertEquals(this.red, this.img1.getPixel(0, 0));    assertEquals(this.orange, this.img2.getPixel(0, 0));    assertEquals(this.orange, this.img2.getPixel(1, 0));    assertEquals(this.green, this.img2.getPixel(0, 1));    assertEquals(this.orange, this.img2.getPixel(1, 1));    assertEquals(this.rose, this.img3.getPixel(0, 0));    assertEquals(this.azure, this.img3.getPixel(1, 0));    assertEquals(this.rose, this.img3.getPixel(0, 2));  }}