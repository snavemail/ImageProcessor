package cs3500.imageprocessor.controller.textcontroller;import java.io.File;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Map;import java.util.Scanner;import cs3500.imageprocessor.model.effects.blendfilter.BlendingFilter;import cs3500.imageprocessor.model.effects.singlelayer.SingleLayerFilter;import cs3500.imageprocessor.model.image.Image;import cs3500.imageprocessor.model.image.Layer;import cs3500.imageprocessor.model.image.Pixel;import cs3500.imageprocessor.model.processor.ImageProcessorModel;import cs3500.imageprocessor.view.textview.ImageViewInterface;import static java.util.Map.entry;/** * Class for controller. It takes in user input and runs the commands. It uses the model to * process the image and the view to display the image. It takes in a model, a view, and a * readable as parameters. */public class ImageControllerImpl implements ImageController {  private final ImageProcessorModel<Layer, Image, Pixel, SingleLayerFilter, BlendingFilter> model;  private final ImageViewInterface view;  private final Readable input;  /**   * Constructor for an image controller, with a model, a view, and a readable as   * parameters.   *   * @param model the model   * @param view  the view   * @param input the readable input   * @throws IllegalArgumentException if any parameters are null   */  public ImageControllerImpl(ImageProcessorModel<Layer, Image, Pixel, SingleLayerFilter,          BlendingFilter> model, ImageViewInterface view, Readable input)          throws IllegalArgumentException {    if (model == null || view == null | input == null) {      throw new IllegalArgumentException();    }    this.model = model;    this.view = view;    this.input = input;    this.view.addController(this);  }  /**   * Runs the controller. It takes in user input and runs the commands. It uses the model to   * process the image and the view to display the image.   *   * @throws IllegalArgumentException if a command is invalid   */  public void commandController() throws IllegalArgumentException {    String scannerInput;    Scanner sc = new Scanner(input);    ArrayList<String> inputs = new ArrayList<>();    int numFields = 1;    boolean loaded = false;    Map<String, ArrayList<String>> commands = Map.ofEntries(            entry("new-project", new ArrayList<>(Arrays.asList("width", "height"))),            entry("load-project", new ArrayList<>(List.of("file-path", "image-name"))),            entry("add-layer", new ArrayList<>(List.of("layer-name"))),            entry("add-image-to-layer", new ArrayList<>(Arrays.asList("layer-name", "file-path",                    "width", "height"))),            entry("set-filter", new ArrayList<>(Arrays.asList("filter-name", "layer-name"))),            entry("set-blend", new ArrayList<>(Arrays.asList("filter-name", "layer-name"))),            entry("save-image", new ArrayList<>(List.of("file-path"))),            entry("save-project", new ArrayList<>(List.of("file-path"))),            entry("show-info", new ArrayList<>()));    renderMenu();    while (true) {      view.renderMessage("Please enter a command.\n----------------------------------");      while (inputs.size() < numFields) {        try {          scannerInput = sc.next();          //quitting          if (scannerInput.equalsIgnoreCase("quit")                  || scannerInput.equalsIgnoreCase("q")) {            view.renderMessage("Quitting...");            sc.close();            return;          }          if (inputs.size() == 0) {            if (commands.containsKey(scannerInput)) {              if (scannerInput.equals("load-project") || loaded) {                inputs.add(scannerInput);                numFields = commands.get(scannerInput).size() + 1;              } else if (scannerInput.equals("new-project")) {                inputs.add(scannerInput);                numFields = commands.get(scannerInput).size() + 1;              } else {                view.renderMessage("Please load in a project first");              }            } else {              view.renderMessage("Invalid command. Please try again.\n");            }          } else {            String command = inputs.get(0);            String inputType = (commands.get(inputs.get(0)).get(inputs.size() - 1));            switch (inputType) {              case "width":              case "height":                try {                  Integer.parseInt(scannerInput);                  inputs.add(scannerInput);                } catch (Exception e) {                  System.out.println(scannerInput + " needs to be an integer value.");                }                break;              case "file-path":                File file = new File(scannerInput);                switch (command) {                  case "load-project": {                    if (file.isFile()) {                      inputs.add(scannerInput);                    } else {                      System.out.println("File " + scannerInput + " does not exist.");                    }                    break;                  }                  case "add-image-to-layer":                    if (file.isFile()) {                      inputs.add(scannerInput);                    } else {                      System.out.println("File " + scannerInput + " does not exist.");                    }                    break;                  case "save-image": {                    if (file.exists()) {                      view.renderMessage("File already exists. Overwriting file.");                      inputs.add(scannerInput);                    } else {                      view.renderMessage("Creating file to save to.");                      inputs.add(scannerInput);                    }                    break;                  }                  case "save-project":                    if (file.exists()) {                      view.renderMessage("File already exists. Overwriting file.");                      inputs.add(scannerInput);                    } else {                      view.renderMessage("Creating file to save to.");                      inputs.add(scannerInput);                    }                    break;                  default:                    System.out.println("Invalid command. Please try again.");                    break;                }                break;              case "layer-name":                if (model.hasKey(scannerInput) || inputs.get(0).equals("add-layer")) {                  inputs.add(scannerInput);                } else {                  System.out.println("Layer " + scannerInput + " does not exist.");                }                break;              case "filter-name":                if (model.hasFilter(scannerInput)) {                  inputs.add(scannerInput);                } else {                  System.out.println("Filter " + scannerInput + " does not exist.");                }                break;              default:                System.out.println("Invalid command. Please try again.");                break;            }          }        } catch (Exception e) {          System.out.println("Invalid input. Please try again.");        }      }      try {        switch (inputs.get(0)) {          case ("load-project"):            model.loadProject(inputs.get(1), inputs.get(2));            loaded = true;            break;          case ("new-project"):            view.renderMessage("Please enter the width and height of the project.");            model.newProject(Integer.parseInt(inputs.get(1)),                    Integer.parseInt(inputs.get(2)));            loaded = true;            break;          case ("save-image"):            view.renderMessage("Please enter the file path of the image you want to save.");            model.save(inputs.get(1));            break;          case ("save-project"):            view.renderMessage("Please enter the file path of the image you want to save.");            model.saveCollage(inputs.get(1));            break;          case ("set-filter"):            view.renderMessage("Please enter the name of the function and the layer you want to "                    + "apply the filter to.");            this.model.applyFunction(inputs.get(1),                    inputs.get(2));            break;          case ("set-blend"):            view.renderMessage("Please enter the name of the function and the layer you want to "                    + "apply the filter to.");            this.model.applyBlendingFunction(inputs.get(1),                    inputs.get(2));            break;          case ("add-layer"):            view.renderMessage("Please enter the name of the layer you want to add.");            this.model.addLayer(inputs.get(1));            this.model.setCurrentLayer(inputs.get(1));            break;          case ("add-image-to-layer"):            view.renderMessage("Please enter the layer name, file path, x location, "                    + "and y location of the image you want to add to the layer.");            this.model.addImageToLayer(inputs.get(1),                    inputs.get(2),                    Integer.parseInt(inputs.get(3)),                    Integer.parseInt(inputs.get(4)));            break;          case ("show-info"):            view.showInfo();            break;          default:            throw new IllegalArgumentException("No command executed!");        }        view.renderMessage("Command executed successfully!");        if (inputs.get(0).equals("load") || inputs.get(0).equals("new-project")) {          loaded = true;        }      } catch (Exception e) {        System.out.println("Invalid input. Please try again.");      }      inputs.clear();    }  }  @Override  public void showInfo() {    for (int i = 0; i < model.getLayers().size(); i++) {      view.renderMessage("Layer Filter: " + model.getFilter(model.getLayers().get(i))              + ", Layer Name: " + model.getName(model.getLayers().get(i)));    }  }  /**   * Renders the menu of commands.   */  public void renderMenu() {    view.renderMessage("MENU OF COMMANDS ");    view.renderMessage("Type 'quit' or 'q' to quit");    view.renderMessage("----------------------------------");    view.renderMessage("-- new-project -- create a new project");    view.renderMessage("Fields: width (int), height (int)");    view.renderMessage("Example: new-project 500 500");    view.renderMessage("-- load-project -- load a project");    view.renderMessage("Fields: file-path (String)");    view.renderMessage("Example: load-project images/tako-eevee.ppm");    view.renderMessage("-- add-layer -- add a new layer");    view.renderMessage("Fields: layer-name (String)");    view.renderMessage("Example: add-layer blue-tako");    view.renderMessage("-- add-image-to-layer -- add an image to a layer");    view.renderMessage("Fields: layer-name (String), file-path (String), "            + "width (int), height (int)");    view.renderMessage("Example: add-image-to-layer blue-component images/tako-eevee.ppm 500 500");    view.renderMessage("-- set-filter -- set a filter for a layer");    view.renderMessage("Fields: layer-name (String), filter-name (String)");    view.renderMessage("Example: set-filter blue-tako blue-component");    view.renderMessage("-- save-image -- save the image to a file");    view.renderMessage("Fields: file-path (String)");    view.renderMessage("Example: save-image images/tako-eevee.ppm");    view.renderMessage("-- save-project -- save the project to a file");    view.renderMessage("Fields: file-path (String)");    view.renderMessage("Example: save-project projects/tako-eevee.collage");  }}