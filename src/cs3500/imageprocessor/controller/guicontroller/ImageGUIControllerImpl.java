package cs3500.imageprocessor.controller.guicontroller;import java.awt.Dimension;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.List;import javax.swing.JOptionPane;import javax.swing.JButton;import cs3500.imageprocessor.model.effects.blendfilter.BlendingFilter;import cs3500.imageprocessor.model.effects.singlelayer.SingleLayerFilter;import cs3500.imageprocessor.model.image.Image;import cs3500.imageprocessor.model.image.Layer;import cs3500.imageprocessor.model.image.Pixel;import cs3500.imageprocessor.model.processor.ImageProcessorModel;import cs3500.imageprocessor.view.guiview.ImageGUIView;/** * Represents a controller for the GUI. This controller is responsible for running the image * processor. It can be used to save images, save projects, add layers, apply filters, and more. */public class ImageGUIControllerImpl implements ImageGUIController {  private final ImageProcessorModel<Layer, Image, Pixel, SingleLayerFilter, BlendingFilter> model;  private final ImageGUIView view;  /**   * Constructs a controller for the GUI. It takes in a model and a view.   * It adds features to the view.   *   * @param model the model.   * @param view  the view.   */  public ImageGUIControllerImpl(ImageProcessorModel<Layer, Image, Pixel, SingleLayerFilter,          BlendingFilter> model, ImageGUIView view) {    this.model = model;    this.view = view;    this.view.addFeatures(this);  }  @Override  public void saveImage(String fileName) throws IOException, IllegalAccessException {    model.save(fileName);  }  @Override  public void saveProject(String fileName) throws IOException {    model.saveCollage(fileName);  }  @Override  public void addLayer(String layerName) throws IllegalAccessException {    try {      model.addLayer(layerName);    } catch (IllegalArgumentException e) {      JOptionPane.showMessageDialog(null,              "Layer already exists");    } catch (IllegalStateException e) {      JOptionPane.showMessageDialog(null,              "Cannot add layer to empty project");    }  }  @Override  public void applyFilter(String filterName) {    try {      model.applyFunction(filterName, model.getName(model.getCurrentLayer()));      this.view.refresh();    } catch (IllegalArgumentException e) {      JOptionPane.showMessageDialog(null,              "Filter does not exist");    } catch (IllegalAccessException e) {      JOptionPane.showMessageDialog(null,              "Layer does not exist");    }  }  @Override  public void applyBlendingFilter(String filterName) {    try {      model.applyBlendingFunction(filterName, model.getName(model.getCurrentLayer()));      this.view.refresh();    } catch (IllegalArgumentException e) {      JOptionPane.showMessageDialog(null,              "Filter does not exist");    } catch (IllegalAccessException e) {      JOptionPane.showMessageDialog(null,              "Layer does not exist");    }  }  @Override  public void newProject(int width, int height) {    try {      model.newProject(width, height);      this.view.refresh();    } catch (IllegalArgumentException e) {      JOptionPane.showMessageDialog(null,              "Width and Height need to be positive");    } catch (IllegalStateException e) {      JOptionPane.showMessageDialog(null,              "Project has already started");    }  }  @Override  public void load(String fileName) {    System.out.println(fileName);    String fileType = fileName.split("[.]")[1];    if (this.model.getLayers().size() > 0) {      JOptionPane.showMessageDialog(null,              "Cannot load project into a project that has already started");      return;    }    try {      if (fileType.equals("txt")) {        model.loadCollage(fileName);      } else if (fileType.equals("ppm")) {        String layerName = JOptionPane.showInputDialog("Enter a layer name");        model.loadPPM(fileName, layerName);      } else if (fileType.equalsIgnoreCase("png")              || fileType.equalsIgnoreCase("jpg")              || fileType.equalsIgnoreCase("jpeg")) {        String layerName = JOptionPane.showInputDialog("Enter a layer name");        model.loadImage(fileName, layerName);      } else {        JOptionPane.showMessageDialog(null,                "File is not valid");      }      this.view.refresh();    } catch (IOException e) {      JOptionPane.showMessageDialog(null,              "File does not exist");    } catch (IllegalArgumentException e) {      JOptionPane.showMessageDialog(null,              "File is not a valid collage");    } catch (IllegalStateException e) {      JOptionPane.showMessageDialog(null,              "Project has already started, so cannot load");    }  }  @Override  public void addImageToLayer(String name, int x, int y) {    try {      model.addImageToLayer(model.getName(model.getCurrentLayer()), name, x, y);      this.view.refresh();    } catch (IllegalArgumentException e) {      JOptionPane.showMessageDialog(null,              "Layer does not exist");    }    catch (IOException e) {      JOptionPane.showMessageDialog(null,              "Image does not exist");    }    catch (IllegalAccessException e) {      JOptionPane.showMessageDialog(null,              "Current layer cannot be retrieved");    }  }  @Override  public void setCurrentLayer(String layerName) {    try {      model.setCurrentLayer(layerName);      this.view.refresh();    } catch (IllegalArgumentException e) {      JOptionPane.showMessageDialog(null,              "Layer does not exist");    }  }  @Override  public void setLayerList() {    this.view.getLeftPanel().removeAll();    for (Layer layer : model.getLayers()) {      JButton button = new JButton(layer.getName());      button.setPreferredSize(new Dimension(180, 50));      button.addActionListener(e -> {        this.setCurrentLayer(layer.getName());      });      this.setCurrentLayer(layer.getName());      this.view.getLeftPanel().add(button);      this.view.getLeftPanel().repaint();      this.view.getLeftPanel().revalidate();    }  }  @Override  public BufferedImage createImage() {    List<List<Pixel>> image = model.getImage();    int width = image.get(0).size();    int height = image.size();    BufferedImage bufferedImage = new BufferedImage(image.get(0).size(), image.size(),            BufferedImage.TYPE_INT_RGB);    for (int i = 0; i < width; i++) {      for (int j = 0; j < height; j++) {        bufferedImage.setRGB(i, j, image.get(j).get(i).getRGB());      }    }    return bufferedImage;  }}