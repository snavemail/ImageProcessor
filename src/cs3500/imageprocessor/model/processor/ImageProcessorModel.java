package cs3500.imageprocessor.model.processor;import java.io.IOException;import java.util.List;/** * The ImageProcessorModel interface defines the methods that an image processor model should * implement. It provides functionality to apply filters to the image * * @param <L> layer * @param <I> image * @param <P> pixel * @param <SLF> single layer filter * @param <BF> blending filter */public interface ImageProcessorModel<L, I, P, SLF, BF> {  /**   * Creates a new project with the given width and height.   *   * @param width  the width of the image.   * @param height the height of the image.   * @throws IllegalStateException if the model already has a project.   */  void newProject(int width, int height) throws IllegalStateException;  String getName(L layer);  String getFilter(L layer);  /**   * Returns the width of the image.   *   * @return the width of the image.   */  int getWidth();  /**   * Returns the height of the image.   *   * @return the height of the image.   */  int getHeight();  /**   * Checks if a key is already in the map and overwrites the entry if it is.   *   * @param key the key of the image.   */  void addLayer(String key);  /**   * Applies the given filter to the image.   *   * @throws IllegalArgumentException if the filter is null.   */  L getCurrentLayer() throws IllegalAccessException;  /**   * Sets the current layer to the given key.   *   * @param key the key of the image.   */  void setCurrentLayer(String key);  /**   * Returns the Image in the hashmap corresponding to the given key.   *   * @param key the key of the image.   * @return the Image at the given key.   */  L getLayer(String key);  /**   * Returns a list of all the layers in the hashmap.   *   * @return a list of all the layers in the hashmap.   */  List<L> getLayers();  /**   * Returns true if the key is in the hashmap.   *   * @param key the key of the image.   * @return a boolean representing whether the key is in the hashmap   */  boolean hasKey(String key);  /**   * returns the width of this image.   *   * @param imageName represents the key for the image in this hashmap.   * @return the width of the given image name.   */  int getLayerWidth(String imageName);  /**   * returns the height of this image.   *   * @param imageName represents the key for the image in this hashmap.   * @return the height of the given image name.   */  int getLayerHeight(String imageName);  /**   * returns the max value of this image.   *   * @param imageName represents the key for the image in this hashmap.   * @return the max value of the given image name.   */  int getLayerMaxValue(String imageName);  /**   * Returns the maximum value of all the layers.   *   * @return the maximum value of all the layers.   */  int getMaxValue();  /**   * Turns a 1D array into a 2D array.   *   * @param flatList represents a 1D array.   * @param height   represents the height.   * @param width    represents the width.   * @return a 2D array of pixels.   */  List<List<P>> create2DArray(List<P> flatList, int height, int width);  /**   * Given a function and an Image, it applies the function to the given image.   *   * @param func  function to be applied.   * @param image image to be applied to.   * @return a new image that is filtered by the function.   */  I applyFilter(SLF func, I image);  /**   * Given a function and a Layer, it applies the function to the given layer.   *   * @param filterName name of the filter   * @param layerName  name of the layer   */  void applyFunction(String filterName, String layerName);  /**   * Given a function and two images, it applies the blending function to the given images.   *   * @param func     function to be applied   * @param topImage represents the first image   * @param botImage represents the second image   * @return a new image that is filtered by the function   */  I applyBlendingFilter(BF func, I topImage, I botImage);  /**   * Given a function and two layers, it applies the blending function to the given layers.   *   * @param filterName name of the filter   * @param topLayer   name of the first layer   */  void applyBlendingFunction(String filterName, String topLayer);  /**   * Adds an image to the given layer.   *   * @param layerName name of the layer   * @param fileLoc   location of the file   * @param xLoc      x location of the image   * @param yLoc      y location of the image   * @throws IOException if the file cannot be loaded.   */  void addImageToLayer(String layerName, String fileLoc, int xLoc, int yLoc)          throws IOException;  /**   * Adds a PPM image to the given layer.   *   * @param layerName name of the layer   * @param fileLoc   location of the file   * @param xLoc      the x location of the image   * @param yLoc      the y location of the image   * @throws IOException if the file cannot be loaded.   */  void addPPMImageToLayer(String layerName, String fileLoc, int xLoc, int yLoc)          throws IOException;  /**   * Adds a PNG or JPG image to the given layer.   *   * @param layerName name of the layer   * @param fileLoc   location of the file   * @param xLoc      x location of the image   * @param yLoc      y location of the image   * @throws IOException if the file cannot be loaded.   */  void addJPGImageToLayer(String layerName, String fileLoc, int xLoc, int yLoc)          throws IOException;  /**   * Adds a PNG image to the given layer.   *   * @param layerName name of the layer   * @param fileLoc   location of the file   * @param xLoc      x location of the image   * @param yLoc      y location of the image   * @throws IOException if the file cannot be loaded.   */  void addPNGImageToLayer(String layerName, String fileLoc, int xLoc, int yLoc)          throws IOException;  /**   * Adds an image to the given layer. For testing purposes.   *   * @param layerName name of the layer   * @param image     image to be added   * @param xLoc      x location of the image   * @param yLoc      y location of the image   */  void addImageToLayerWithImage(String layerName, I image, int xLoc, int yLoc);  /**   * Returns if the given string is a name of a filter.   *   * @param filterName name of the filter   * @return true if the given string is a name of a filter   */  boolean hasFilter(String filterName);  /**   * Loads a file into the model.   *   * @param fileLoc  the location of the file   * @param fileName the name of the file   * @throws IOException if the file cannot be loaded.   */  void loadProject(String fileLoc, String fileName) throws IOException;  /**   * Loads a file into the model. The file should be of type jpg or png.   *   * @param fileLoc   the location of the file   * @param layerName the name of the layer   * @throws IOException if the file cannot be loaded.   */  void loadImage(String fileLoc, String layerName) throws IOException;  /**   * Loads ppm file into the model.   *   * @param filename  the name of the file   * @param imageName the name of the image   * @throws IOException if the file cannot be loaded.   */  void loadPPM(String filename, String imageName) throws IOException;  /**   * Loads a collage from a file.   *   * @param filename the name of the file   * @throws IOException if the file cannot be loaded.   */  void loadCollage(String filename) throws IOException;  /**   * Saves the project to a file depending on the type of file given.   *   * @param location the location of the file   * @throws IOException if the file cannot be saved.   */  void save(String location) throws IOException, IllegalAccessException;  /**   * Saves the project to a file that isn't a PPM.   *   * @param location the location of the file   */  void saveJPG(String location);  void savePNG(String location);  /**   * Saves the project to a file.   *   * @param location the location of the file   * @throws IOException              if the file cannot be saved.   * @throws IllegalArgumentException if the file is not a txt.   */  void saveCollage(String location) throws IOException, IllegalArgumentException;  /**   * Saves the project to a file.   *   * @param location the location of the file   * @throws IOException if the file cannot be saved.   */  void savePPM(String location) throws IOException, IllegalAccessException;  /**   * Returns the current layer's image as a double list of type P.   *   * @return the current layer's image as a double list of type P   */  List<List<P>> getImage();}