package cs3500.imageprocessor.model.functions;import java.awt.image.BufferedImage;import java.util.ArrayList;import java.util.List;import cs3500.imageprocessor.model.image.Pixel;import cs3500.imageprocessor.model.image.PixelImpl;/** * This interface contains methods that are used by multiple functions. This interface is used to * reduce code duplication. */public interface FunctionUtils {  /**   * Clamps a rgb's value to the max of 255.   *   * @param value the r, g, or b value.   * @return the clamped value.   */  static int clampValue(int value) {    return Math.max(0, Math.min(value, 255));  }  /**   * Returns the 24-bit channel value given 3 red, green, and blue values.   *   * @param red   represents the red value   * @param green represents the green value   * @param blue  represents the blue value   * @return the 24-bit channel value.   */  static int channelValue(int red, int green, int blue) {    return ((red & 0x0ff) << 16) | ((green & 0x0ff) << 8) | (blue & 0x0ff);  }  /**   * Returns the 32-bit channel value given 3 red, green, and blue values.   *   * @param red   represents the red value   * @param green represents the green value   * @param blue  represents the blue value   * @return the 24-bit channel value.   */  static int alphaChannelValue(int alpha, int red, int green, int blue) {    return ((alpha & 0x0ff) << 24)            | ((red & 0x0ff) << 16)            | ((green & 0x0ff) << 8)            | (blue & 0x0ff);  }  /**   * Creates a grid of pixels from a given BufferedImage.   *   * @param image the image to be converted into a grid of pixels.   * @return a grid of pixels.   */  static List<List<Pixel>> createImageGrid(BufferedImage image) {    List<List<Pixel>> pixelGrid = new ArrayList<>();    for (int i = 0; i < image.getHeight(); i++) {      List<Pixel> row = new ArrayList<>();      for (int j = 0; j < image.getWidth(); j++) {        int rgb = image.getRGB(j, i);        int red = (rgb >> 16) & 0xFF;        int green = (rgb >> 8) & 0xFF;        int blue = (rgb) & 0xFF;        row.add(new PixelImpl(red, green, blue));      }      pixelGrid.add(row);    }    return pixelGrid;  }  /**   * Creates a grid of pixels from a given BufferedImage.   *   * @param image the image to be converted into a grid of pixels.   * @return a grid of pixels.   */  static List<List<Pixel>> createAlphaImageGrid(BufferedImage image) {    List<List<Pixel>> pixelGrid = new ArrayList<>();    for (int i = 0; i < image.getHeight(); i++) {      List<Pixel> row = new ArrayList<>();      for (int j = 0; j < image.getWidth(); j++) {        int rgb = image.getRGB(j, i);        int alpha = (rgb >> 24) & 0xFF;        int red = (rgb >> 16) & 0xFF;        int green = (rgb >> 8) & 0xFF;        int blue = (rgb) & 0xFF;        row.add(new PixelImpl(alpha, red, green, blue));      }      pixelGrid.add(row);    }    return pixelGrid;  }}