package cs3500.imageprocessor.model.image;import java.util.ArrayList;import java.util.List;import cs3500.imageprocessor.model.effects.singlelayer.BrightenIntensity;import cs3500.imageprocessor.model.effects.singlelayer.BrightenValue;import cs3500.imageprocessor.model.effects.singlelayer.DarkenIntensity;import cs3500.imageprocessor.model.effects.singlelayer.DarkenLuma;import cs3500.imageprocessor.model.effects.singlelayer.DarkenValue;import cs3500.imageprocessor.model.effects.singlelayer.GreenComponent;import cs3500.imageprocessor.model.effects.LayerFilter;import cs3500.imageprocessor.model.effects.singlelayer.Normal;import cs3500.imageprocessor.model.effects.singlelayer.RedComponent;import cs3500.imageprocessor.model.effects.singlelayer.BlueComponent;import cs3500.imageprocessor.model.effects.singlelayer.BrightenLuma;/** * This class represents a layer of images. A layer can have a filter applied to it. The filter will * be applied to all images in the layer. A layer can also have multiple images added to it. */public class LayerImpl implements Layer {  private final String name;  private final List<Image> imageList;  LayerFilter filter;  private final int width;  private final int height;  /**   * Constructs a layer with the given name, list of images, width, and height.   *   * @param name      the name of the layer.   * @param imageList the list of images in the layer.   * @param width     the width of the layer.   * @param height    the height of the layer.   */  public LayerImpl(String name, List<Image> imageList, int width, int height) {    this.name = name;    this.imageList = imageList;    this.width = width;    this.height = height;    this.filter = new Normal();  }  /**   * Constructs a layer with the given name, list of images, width, and height.   *   * @param name      the name of the layer.   * @param imageList the list of images in the layer.   * @param width     the width of the layer.   * @param height    the height of the layer.   * @param filter    the filter of the layer.   */  public LayerImpl(String name, List<Image> imageList, String filter, int width, int height) {    this.name = name;    this.imageList = imageList;    this.width = width;    this.height = height;    switch (filter) {      case "Red Component":        this.filter = new RedComponent();        break;      case "Green Component":        this.filter = new GreenComponent();        break;      case "Blue Component":        this.filter = new BlueComponent();        break;      case "Brighten Intensity":        this.filter = new BrightenIntensity();        break;      case "Brighten Luma":        this.filter = new BrightenLuma();        break;      case "Brighten Value":        this.filter = new BrightenValue();        break;      case "Darken Intensity":        this.filter = new DarkenIntensity();        break;      case "Darken Luma":        this.filter = new DarkenLuma();        break;      case "Darken Value":        this.filter = new DarkenValue();        break;      default:        this.filter = new Normal();        break;    }  }  public String getName() {    return name;  }  public int getHeight() {    return height;  }  public int getWidth() {    return width;  }  @Override  public int getMaxValue() {    int maxValue = 0;    for (Image image : imageList) {      maxValue = Math.max(maxValue, image.getMaxValue());    }    return maxValue;  }  @Override  public Pixel getPixel(int x, int y) {    Pixel pixel = new PixelImpl(255, 255, 255);    for (Image image : imageList) {      if (image.inBounds(x, y, image.getWidth(), image.getHeight())) {        pixel = image.getPixel(x, y);      }    }    return pixel;  }  @Override  public List<Pixel> getPixels() {    List<Pixel> pixelList = new ArrayList<>();    for (int y = 0; y < height; y++) {      for (int x = 0; x < width; x++) {        pixelList.add(getPixel(x, y));      }    }    return pixelList;  }  @Override  public void addImage(Image image, int xLoc, int yLoc) {    image.setXLoc(xLoc);    image.setYLoc(yLoc);    imageList.add(image);  }  @Override  public LayerFilter getFilter() {    return this.filter;  }  @Override  public void setFilter(LayerFilter filter) {    this.filter = filter;  }  @Override  public List<Image> getImages() {    return imageList;  }}