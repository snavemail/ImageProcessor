package cs3500.imageprocessor;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.InputStreamReader;import cs3500.imageprocessor.controller.guicontroller.ImageGUIController;import cs3500.imageprocessor.controller.guicontroller.ImageGUIControllerImpl;import cs3500.imageprocessor.controller.textcontroller.ImageController;import cs3500.imageprocessor.controller.textcontroller.ImageControllerImpl;import cs3500.imageprocessor.model.effects.blendfilter.BlendingFilter;import cs3500.imageprocessor.model.effects.singlelayer.SingleLayerFilter;import cs3500.imageprocessor.model.image.Image;import cs3500.imageprocessor.model.image.Layer;import cs3500.imageprocessor.model.image.Pixel;import cs3500.imageprocessor.model.processor.ImageProcessorModel;import cs3500.imageprocessor.model.processor.ImageProcessorModelImpl;import cs3500.imageprocessor.view.guiview.ImageGUIView;import cs3500.imageprocessor.view.guiview.ImageGUIViewImpl;import cs3500.imageprocessor.view.textview.ImageViewImpl;import cs3500.imageprocessor.view.textview.ImageViewInterface;/** * Represents the main class for the image processor. * This class is responsible for running the image processor. * It creates the model, view, and controller and then runs the controller. * The controller takes in user input and runs the commands. * The model is responsible for processing the image. * The view is responsible for displaying the image. */public class ImageProcessor {  /**   * Runs the image processor. It takes in command line arguments to determine which view to use.   * If no arguments are given, it will use the GUI view. If the argument "-script" is given,   * it will use the text view. If the argument "-gui" is given, it will use the GUI view.   *   * @param args represents the command line arguments.   */  public static void main(String[] args) {    Readable reader = null;    if (args.length > 0) {      if (args[0].equals("-script")) {        if (args.length > 1) {          try {            String filePath = (args[1] + " .txt");            System.out.println("File path given: " + filePath);            reader = new FileReader(filePath);            System.out.println("Reading from file: " + filePath);            System.out.println("Attempting to find file");            System.out.println("File found");          } catch (FileNotFoundException e) {            System.out.println("File not found");          }        } else {          System.out.println("No file path given");          reader = new InputStreamReader(System.in);        }        ImageProcessorModel<Layer, Image, Pixel, SingleLayerFilter, BlendingFilter> model =                new ImageProcessorModelImpl();        ImageViewInterface view = new ImageViewImpl();        ImageController controller = new ImageControllerImpl(model, view, reader);        controller.commandController();      } else if (args[0].equals("-gui")) {        ImageProcessorModel<Layer, Image, Pixel, SingleLayerFilter, BlendingFilter> model =                new ImageProcessorModelImpl();        ImageGUIView view = new ImageGUIViewImpl();        ImageGUIController controller = new ImageGUIControllerImpl(model, view);      }    } else {      ImageProcessorModel<Layer, Image, Pixel, SingleLayerFilter, BlendingFilter> model =              new ImageProcessorModelImpl();      ImageGUIViewImpl view = new ImageGUIViewImpl();      ImageGUIController controller = new ImageGUIControllerImpl(model, view);    }  }}